(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     75396,       1626]
NotebookOptionsPosition[     27624,        752]
NotebookOutlinePosition[     73964,       1606]
CellTagsIndexPosition[     73921,       1603]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"(*", " ", 
    RowBox[{
    "En", " ", "este", " ", "bloque", " ", "aprenderemos", " ", "el", " ", 
     "c\[OAcute]digo", " ", "necesario", " ", "para", " ", "resolver", " ", 
     "una", " ", "EDO", " ", "sin", " ", "condiciones", " ", "inciales"}], 
    "*)"}], "Section"], 
  StyleBox["\[IndentingNewLine]", "Section"], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"EJERCICIO", ":", " ", 
    RowBox[{"Resolver", " ", "la", " ", "EDO"}], ":", " ", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"y", "''"}], "[", "x", "]"}], "-", 
      RowBox[{"3", " ", 
       RowBox[{
        RowBox[{"y", "'"}], "[", "x", "]"}]}], "+", 
      RowBox[{"2", " ", 
       RowBox[{"y", "[", "x", "]"}]}]}], "==", "0"}]}], "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "*", "Iniciaremos", " ", "definiendo", " ", "una", " ", "variable", " ", 
    "para", " ", "la", " ", "EDO"}], "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"edo1", " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"y", "''"}], "[", "x", "]"}], "-", 
      RowBox[{"3", 
       RowBox[{
        RowBox[{"y", "'"}], "[", "x", "]"}]}], "+", 
      RowBox[{"2", 
       RowBox[{"y", "[", "x", "]"}]}]}], "==", "0"}]}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "Para", " ", "resolver", " ", "EDOs", " ", "con", " ", 
      "soluci\[OAcute]n", " ", "exacta", " ", "usamos", " ", "Dsolve"}], ",", 
     " ", 
     RowBox[{"de", " ", "la", " ", "cual", " ", "su", " ", "sintaxis", " ", 
      RowBox[{"es", ":", "\[IndentingNewLine]", 
       RowBox[{"DSolve", "[", 
        RowBox[{
         RowBox[{"edo", " ", "a", " ", "resolver"}], ",", " ", 
         RowBox[{"funcion", " ", "soluci\[OAcute]n"}], ",", " ", 
         RowBox[{
         "variable", " ", "dependiente", " ", "de", " ", "la", " ", "funcion",
           " ", "soluci\[OAcute]n"}]}], "]"}]}]}]}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"solGeneral1", "=", 
    RowBox[{"DSolve", "[", 
     RowBox[{"edo1", ",", 
      RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Por", " ", "\[UAcute]ltimo", " ", "extraemos", " ", "la", " ", 
     "soluci\[OAcute]n", " ", "y", " ", "simplificamos"}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Extraer", " ", "la", " ", "expresi\[OAcute]n", " ", "para", " ", 
     RowBox[{"y", "[", "x", "]"}]}], "*)"}], 
   RowBox[{"yGeneral1", "=", 
    RowBox[{
     RowBox[{"y", "[", "x", "]"}], "/.", " ", 
     RowBox[{"solGeneral1", "[", 
      RowBox[{"[", "1", "]"}], "]"}]}]}], "\n", 
   RowBox[{"Simplify", "[", "yGeneral1", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.9674754209481955`*^9, 3.9674754795902004`*^9}, {
  3.967475561584285*^9, 3.9674755735501757`*^9}, {3.9674756687802763`*^9, 
  3.967475750897599*^9}, {3.967475800888309*^9, 3.967475896558584*^9}, {
  3.96747598976228*^9, 3.967475990867833*^9}, {3.9674760632493696`*^9, 
  3.9674761234367104`*^9}, {3.967476171444874*^9, 3.967476182057807*^9}, {
  3.9674762756323056`*^9, 3.9674763850791235`*^9}, {3.9674768263137646`*^9, 
  3.9674768799632335`*^9}, {3.9674772932136793`*^9, 3.967477308795017*^9}, {
  3.9674775033087115`*^9, 3.967477513080209*^9}},
 CellLabel->
  "In[297]:=",ExpressionUUID->"ca4aecce-2e7a-4129-98d8-48ad68c4518e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"2", " ", 
    RowBox[{"y", "[", "x", "]"}]}], "-", 
   RowBox[{"3", " ", 
    RowBox[{
     SuperscriptBox["y", "\[Prime]",
      MultilineFunction->None], "[", "x", "]"}]}], "+", 
   RowBox[{
    SuperscriptBox["y", "\[Prime]\[Prime]",
     MultilineFunction->None], "[", "x", "]"}]}], "\[Equal]", "0"}]], "Output",
 CellChangeTimes->{
  3.9674761300576086`*^9, {3.9674762639726086`*^9, 3.9674762900183153`*^9}, 
   3.9674763289986525`*^9, {3.967476864348007*^9, 3.9674768835849843`*^9}, 
   3.9674798397067547`*^9, 3.9674798960145826`*^9, 3.9674849726414604`*^9, 
   3.9674851312976484`*^9, 3.96748519910544*^9, 3.9674852936608367`*^9, 
   3.9674855217892447`*^9, 3.967485573983506*^9, 3.9674856079788623`*^9, {
   3.9674857686968007`*^9, 3.9674857834602995`*^9}, 3.967485845202733*^9, 
   3.96748591484669*^9, 3.967486005750893*^9, 3.9674860854542265`*^9, 
   3.9674861961859984`*^9, 3.9674869731128097`*^9, 3.9674870497860384`*^9, 
   3.967487155576829*^9, {3.9674873332935085`*^9, 3.9674873555393944`*^9}},
 CellLabel->
  "Out[297]=",ExpressionUUID->"87e044d3-a862-473a-a11c-777aa3aa04a3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{
      SuperscriptBox["\[ExponentialE]", "x"], " ", 
      TemplateBox[{"1"},
       "C"]}], "+", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"2", " ", "x"}]], " ", 
      TemplateBox[{"2"},
       "C"]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{
  3.9674761300576086`*^9, {3.9674762639726086`*^9, 3.9674762900183153`*^9}, 
   3.9674763289986525`*^9, {3.967476864348007*^9, 3.9674768835849843`*^9}, 
   3.9674798397067547`*^9, 3.9674798960145826`*^9, 3.9674849726414604`*^9, 
   3.9674851312976484`*^9, 3.96748519910544*^9, 3.9674852936608367`*^9, 
   3.9674855217892447`*^9, 3.967485573983506*^9, 3.9674856079788623`*^9, {
   3.9674857686968007`*^9, 3.9674857834602995`*^9}, 3.967485845202733*^9, 
   3.96748591484669*^9, 3.967486005750893*^9, 3.9674860854542265`*^9, 
   3.9674861961859984`*^9, 3.9674869731128097`*^9, 3.9674870497860384`*^9, 
   3.967487155576829*^9, {3.9674873332935085`*^9, 3.9674873555554905`*^9}},
 CellLabel->
  "Out[298]=",ExpressionUUID->"7d67d3f9-e792-475e-8060-a46007f230b4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["\[ExponentialE]", "x"], " ", 
   TemplateBox[{"1"},
    "C"]}], "+", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"2", " ", "x"}]], " ", 
   TemplateBox[{"2"},
    "C"]}]}]], "Output",
 CellChangeTimes->{
  3.9674761300576086`*^9, {3.9674762639726086`*^9, 3.9674762900183153`*^9}, 
   3.9674763289986525`*^9, {3.967476864348007*^9, 3.9674768835849843`*^9}, 
   3.9674798397067547`*^9, 3.9674798960145826`*^9, 3.9674849726414604`*^9, 
   3.9674851312976484`*^9, 3.96748519910544*^9, 3.9674852936608367`*^9, 
   3.9674855217892447`*^9, 3.967485573983506*^9, 3.9674856079788623`*^9, {
   3.9674857686968007`*^9, 3.9674857834602995`*^9}, 3.967485845202733*^9, 
   3.96748591484669*^9, 3.967486005750893*^9, 3.9674860854542265`*^9, 
   3.9674861961859984`*^9, 3.9674869731128097`*^9, 3.9674870497860384`*^9, 
   3.967487155576829*^9, {3.9674873332935085`*^9, 3.9674873555687375`*^9}},
 CellLabel->
  "Out[299]=",ExpressionUUID->"b3c011e8-ffc6-467a-b94c-ea3331106908"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", "x"], " ", 
  RowBox[{"(", 
   RowBox[{
    TemplateBox[{"1"},
     "C"], "+", 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", "x"], " ", 
     TemplateBox[{"2"},
      "C"]}]}], ")"}]}]], "Output",
 CellChangeTimes->{
  3.9674761300576086`*^9, {3.9674762639726086`*^9, 3.9674762900183153`*^9}, 
   3.9674763289986525`*^9, {3.967476864348007*^9, 3.9674768835849843`*^9}, 
   3.9674798397067547`*^9, 3.9674798960145826`*^9, 3.9674849726414604`*^9, 
   3.9674851312976484`*^9, 3.96748519910544*^9, 3.9674852936608367`*^9, 
   3.9674855217892447`*^9, 3.967485573983506*^9, 3.9674856079788623`*^9, {
   3.9674857686968007`*^9, 3.9674857834602995`*^9}, 3.967485845202733*^9, 
   3.96748591484669*^9, 3.967486005750893*^9, 3.9674860854542265`*^9, 
   3.9674861961859984`*^9, 3.9674869731128097`*^9, 3.9674870497860384`*^9, 
   3.967487155576829*^9, {3.9674873332935085`*^9, 3.967487355579834*^9}},
 CellLabel->
  "Out[300]=",ExpressionUUID->"517dad4e-1ba0-4afb-a19f-d3910e34554f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"(*", " ", 
    RowBox[{
    "En", " ", "este", " ", "bloque", " ", "aprenderemos", " ", "el", " ", 
     "c\[OAcute]digo", " ", "necesario", " ", "para", " ", "resolver", " ", 
     "una", " ", "EDO", " ", "con", " ", "condiciones", " ", "inciales"}], 
    "*)"}], "Subsection"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"EJERCICIO", ":", " ", 
      RowBox[{"Resolver", " ", "la", " ", "EDO"}], ":", " ", 
      RowBox[{
       RowBox[{"y", "''"}], "-", 
       RowBox[{"3", " ", 
        RowBox[{"y", "'"}]}], "+", 
       RowBox[{"2", " ", "y"}]}]}], "=", 
     RowBox[{
      RowBox[{"x", " ", "con", " ", "y", 
       RowBox[{"(", "0", ")"}]}], "=", "1"}]}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"y", "'"}], 
      RowBox[{"(", "0", ")"}]}], "=", "0"}]}], "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Definimos", " ", "la", " ", "edo"}], "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"edo2", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"y", "''"}], "[", "x", "]"}], "-", 
       RowBox[{"3", 
        RowBox[{
         RowBox[{"y", "'"}], "[", "x", "]"}]}], "+", 
       RowBox[{"2", 
        RowBox[{"y", "[", "x", "]"}]}]}], "==", "x"}]}], ";"}], "  ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"condicion2", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"y", "[", "0", "]"}], "==", "1"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"y", "'"}], "[", "0", "]"}], "==", "0"}]}], "}"}]}], ";", 
    " ", 
    RowBox[{"(*", 
     RowBox[{";", " ", 
      RowBox[{"suprime", " ", "el", " ", "print"}]}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"(*", "Resolvemos", "*)"}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"solGeneral2", " ", "=", " ", 
     RowBox[{"DSolve", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"edo2", ",", "condicion2"}], "}"}], ",", 
       RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"yGeneral2", " ", "=", " ", 
    RowBox[{
     RowBox[{"y", "[", "x", "]"}], "/.", " ", 
     RowBox[{"solGeneral2", "[", 
      RowBox[{"[", "1", "]"}], "]"}]}]}], "\[IndentingNewLine]", 
   RowBox[{"Simplify", "[", "yGeneral2", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.9674773206677623`*^9, 3.967477445049369*^9}, {
  3.9674774841383305`*^9, 3.967477492232634*^9}, {3.96747757432056*^9, 
  3.967477618543358*^9}, {3.9674795703216925`*^9, 3.96747970887337*^9}, {
  3.967479760498782*^9, 3.967479832737728*^9}, {3.9674798903945627`*^9, 
  3.9674798914648*^9}, {3.967485900520666*^9, 3.9674859090114503`*^9}},
 CellLabel->
  "In[301]:=",ExpressionUUID->"f9d3e8c4-e8a9-4a73-9aa2-ef0335f9e1a7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "\[Rule]", 
    RowBox[{
     FractionBox["1", "4"], " ", 
     RowBox[{"(", 
      RowBox[{"3", "+", 
       RowBox[{"4", " ", 
        SuperscriptBox["\[ExponentialE]", "x"]}], "-", 
       RowBox[{"3", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"2", " ", "x"}]]}], "+", 
       RowBox[{"2", " ", "x"}]}], ")"}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{
  3.9674798399645586`*^9, 3.9674798961627817`*^9, 3.9674849729771624`*^9, 
   3.967485131367733*^9, 3.967485199222908*^9, 3.9674852937953367`*^9, 
   3.967485521893755*^9, 3.9674855740891323`*^9, 3.9674856080468855`*^9, {
   3.9674857687987576`*^9, 3.96748578355861*^9}, 3.9674858453190355`*^9, 
   3.9674859150064917`*^9, 3.9674860058663464`*^9, 3.96748608556378*^9, 
   3.967486196286248*^9, 3.967486973216694*^9, 3.9674870498775063`*^9, 
   3.9674871556651025`*^9, {3.9674873333787856`*^9, 3.9674873556427865`*^9}},
 CellLabel->
  "Out[302]=",ExpressionUUID->"519c9ce7-1c81-4334-9bdd-7f7f52abe4b5"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "4"], " ", 
  RowBox[{"(", 
   RowBox[{"3", "+", 
    RowBox[{"4", " ", 
     SuperscriptBox["\[ExponentialE]", "x"]}], "-", 
    RowBox[{"3", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"2", " ", "x"}]]}], "+", 
    RowBox[{"2", " ", "x"}]}], ")"}]}]], "Output",
 CellChangeTimes->{
  3.9674798399645586`*^9, 3.9674798961627817`*^9, 3.9674849729771624`*^9, 
   3.967485131367733*^9, 3.967485199222908*^9, 3.9674852937953367`*^9, 
   3.967485521893755*^9, 3.9674855740891323`*^9, 3.9674856080468855`*^9, {
   3.9674857687987576`*^9, 3.96748578355861*^9}, 3.9674858453190355`*^9, 
   3.9674859150064917`*^9, 3.9674860058663464`*^9, 3.96748608556378*^9, 
   3.967486196286248*^9, 3.967486973216694*^9, 3.9674870498775063`*^9, 
   3.9674871556651025`*^9, {3.9674873333787856`*^9, 3.967487355653405*^9}},
 CellLabel->
  "Out[303]=",ExpressionUUID->"25ab1bcf-1465-44a0-91cd-277d972b19c3"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "4"], " ", 
  RowBox[{"(", 
   RowBox[{"3", "+", 
    RowBox[{"4", " ", 
     SuperscriptBox["\[ExponentialE]", "x"]}], "-", 
    RowBox[{"3", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"2", " ", "x"}]]}], "+", 
    RowBox[{"2", " ", "x"}]}], ")"}]}]], "Output",
 CellChangeTimes->{
  3.9674798399645586`*^9, 3.9674798961627817`*^9, 3.9674849729771624`*^9, 
   3.967485131367733*^9, 3.967485199222908*^9, 3.9674852937953367`*^9, 
   3.967485521893755*^9, 3.9674855740891323`*^9, 3.9674856080468855`*^9, {
   3.9674857687987576`*^9, 3.96748578355861*^9}, 3.9674858453190355`*^9, 
   3.9674859150064917`*^9, 3.9674860058663464`*^9, 3.96748608556378*^9, 
   3.967486196286248*^9, 3.967486973216694*^9, 3.9674870498775063`*^9, 
   3.9674871556651025`*^9, {3.9674873333787856`*^9, 3.9674873556585097`*^9}},
 CellLabel->
  "Out[304]=",ExpressionUUID->"6e38ed9d-b69d-4dd8-852a-ea193c8465de"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    StyleBox[
     RowBox[{
     "*", " ", "En", " ", "este", " ", "bloque", " ", "aprenderemos", " ", 
      "el", " ", "c\[OAcute]digo", " ", "necesario", " ", "para", " ", 
      "resolver", " ", "un", " ", "sistema", " ", "de", " ", "EDOs", " ", 
      "sin", " ", "condiciones", " ", "inciales"}], "Section"]}], 
   StyleBox["*)", "Section"]}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"EJERCICIO", ":", " ", 
     RowBox[{"Resolver", " ", "el", " ", "sistema"}], ":", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"y", "''"}], "[", "t", "]"}], "+", 
      RowBox[{"4", "x"}]}]}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"3", 
       RowBox[{"sin", "[", "t", "]"}], "\[IndentingNewLine]", 
       "\t\t                      ", 
       RowBox[{
        RowBox[{"x", "'"}], "[", "t", "]"}]}], "-", 
      RowBox[{
       RowBox[{"y", "''"}], "[", "t", "]"}], "+", 
      RowBox[{"y", "[", "t", "]"}]}], "=", 
     RowBox[{"2", 
      RowBox[{"cos", "[", "t", "]"}], " ", "\[IndentingNewLine]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"sin", " ", "condiciones"}], "->", 
        RowBox[{"soluci\[OAcute]n", " ", "general"}]}], ")"}]}]}]}], "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Definimos", " ", "el", " ", "sistema", " ", "de", " ", "EDOs"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"sistema1", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"x", "''"}], "[", "t", "]"}], "+", 
        RowBox[{"4", " ", 
         RowBox[{"x", "[", "t", "]"}]}]}], "==", 
       RowBox[{"3", " ", 
        RowBox[{"Sin", "[", "t", "]"}]}]}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"x", "'"}], "[", "t", "]"}], "-", 
        RowBox[{
         RowBox[{"y", "''"}], "[", "t", "]"}], "+", 
        RowBox[{"y", "[", "t", "]"}]}], "==", 
       RowBox[{"2", " ", 
        RowBox[{"Cos", "[", "t", "]"}]}]}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Resolver", " ", "con", " ", "DSolve"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"solGeneral3", "=", 
    RowBox[{"DSolve", "[", 
     RowBox[{"sistema1", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x", "[", "t", "]"}], ",", 
        RowBox[{"y", "[", "t", "]"}]}], "}"}], ",", "t"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "Extraer", " ", "la", " ", "primera", " ", "familia", " ", "de", " ", 
    "soluciones", " ", 
    RowBox[{"(", 
     RowBox[{"Part", " ", 
      RowBox[{"con", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ")"}]}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"xSol", "=", 
   RowBox[{
    RowBox[{"x", "[", "t", "]"}], "/.", " ", 
    RowBox[{"solGeneral3", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ySol", "=", 
    RowBox[{
     RowBox[{"y", "[", "t", "]"}], "/.", " ", 
     RowBox[{"solGeneral3", "[", 
      RowBox[{"[", "1", "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "Simplificar", " ", "las", " ", "expresiones", " ", "resultantes"}], 
   "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"xSolSimpl", "=", 
   RowBox[{"Simplify", "[", "xSol", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ySolSimpl", "=", 
    RowBox[{"Simplify", "[", "ySol", "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", "Mostrar", "*)"}]}], "\n", 
 RowBox[{"{", 
  RowBox[{"xSolSimpl", ",", "ySolSimpl"}], "}"}], "\n"}], "Input",
 CellChangeTimes->{{3.9674799910375566`*^9, 3.967480111759299*^9}, {
   3.967484755868045*^9, 3.96748496707755*^9}, {3.967485009342517*^9, 
   3.967485121609666*^9}, 3.9674852867036524`*^9, {3.967485347793443*^9, 
   3.9674855042252216`*^9}, {3.9674855606170497`*^9, 3.967485599553299*^9}, {
   3.9674857496194124`*^9, 3.9674857786070476`*^9}, {3.9674858347667503`*^9, 
   3.9674858407636976`*^9}, {3.967485999899375*^9, 3.967485999966591*^9}, {
   3.967486038716425*^9, 3.9674860388204346`*^9}, {3.967486187991968*^9, 
   3.9674861881659594`*^9}, {3.967486325931686*^9, 3.967486328115956*^9}, {
   3.967486520608588*^9, 3.967486550175445*^9}},
 CellLabel->
  "In[305]:=",ExpressionUUID->"77e41077-1d19-4b0c-a6f0-c22b3b94f1ba"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     TemplateBox[{"1"},
      "C"], " ", 
     RowBox[{"Cos", "[", 
      RowBox[{"2", " ", "t"}], "]"}]}], "+", 
    RowBox[{"Sin", "[", "t", "]"}], "+", 
    RowBox[{
     TemplateBox[{"2"},
      "C"], " ", 
     RowBox[{"Cos", "[", "t", "]"}], " ", 
     RowBox[{"Sin", "[", "t", "]"}]}]}], ",", 
   RowBox[{
    FractionBox["1", "10"], " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"-", "t"}]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"4", " ", 
       TemplateBox[{"1"},
        "C"]}], "-", 
      RowBox[{"4", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"2", " ", "t"}]], " ", 
       TemplateBox[{"1"},
        "C"]}], "+", 
      TemplateBox[{"2"},
       "C"], "+", 
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"2", " ", "t"}]], " ", 
       TemplateBox[{"2"},
        "C"]}], "+", 
      RowBox[{"5", " ", 
       TemplateBox[{"3"},
        "C"]}], "+", 
      RowBox[{"5", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"2", " ", "t"}]], " ", 
       TemplateBox[{"3"},
        "C"]}], "-", 
      RowBox[{"5", " ", 
       TemplateBox[{"4"},
        "C"]}], "+", 
      RowBox[{"5", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"2", " ", "t"}]], " ", 
       TemplateBox[{"4"},
        "C"]}], "+", 
      RowBox[{"5", " ", 
       SuperscriptBox["\[ExponentialE]", "t"], " ", 
       RowBox[{"Cos", "[", "t", "]"}]}], "-", 
      RowBox[{"2", " ", 
       SuperscriptBox["\[ExponentialE]", "t"], " ", 
       TemplateBox[{"2"},
        "C"], " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"2", " ", "t"}], "]"}]}], "+", 
      RowBox[{"4", " ", 
       SuperscriptBox["\[ExponentialE]", "t"], " ", 
       TemplateBox[{"1"},
        "C"], " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", " ", "t"}], "]"}]}]}], ")"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.9674860860588636`*^9, 3.9674861974258876`*^9, 3.9674869735044003`*^9, 
   3.9674870501555862`*^9, 3.967487155936298*^9, {3.9674873337137775`*^9, 
   3.967487355954877*^9}},
 CellLabel->
  "Out[311]=",ExpressionUUID->"5a2d2ae9-d134-431c-acfd-739ca06b9c30"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    StyleBox[
     RowBox[{
     "*", " ", "En", " ", "este", " ", "bloque", " ", "aprenderemos", " ", 
      "el", " ", "c\[OAcute]digo", " ", "necesario", " ", "para", " ", 
      "resolver", " ", "un", " ", "sistema", " ", "de", " ", "EDOs", " ", 
      "con", " ", "condiciones", " ", "inciales"}], "Section"]}], 
   StyleBox["*)", "Section"]}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Sistema", ":", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"y", "''"}], "[", "t", "]"}], "+", 
      RowBox[{"4", "x"}]}]}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"3", 
       RowBox[{"sin", "[", "t", "]"}], "\[IndentingNewLine]", "\t\t ", 
       RowBox[{
        RowBox[{"x", "'"}], "[", "t", "]"}]}], "-", 
      RowBox[{
       RowBox[{"y", "''"}], "[", "t", "]"}], "+", 
      RowBox[{"y", "[", "t", "]"}]}], "=", 
     RowBox[{"2", 
      RowBox[{"cos", "[", "t", "]"}]}]}]}], " ", "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"EJERCICIO", ":", " ", 
     RowBox[{"Resolver", " ", "el", " ", "sistema"}], ":", 
     "\[IndentingNewLine]", "\t\t\t\t", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"x", "'"}], "[", "t", "]"}], "-", 
       RowBox[{"y", "[", "t", "]"}], "+", 
       RowBox[{"z", "[", "t", "]"}]}], "==", 
      RowBox[{"0", "\[IndentingNewLine]", "\t\t\t ", "-", 
       RowBox[{"x", "[", "t", "]"}], "+", 
       RowBox[{
        RowBox[{"y", "'"}], "[", "t", "]"}], "-", 
       RowBox[{"y", "[", "t", "]"}]}], "==", 
      RowBox[{"0", "\[IndentingNewLine]", "\t\t\t ", "-", 
       RowBox[{"x", "[", "t", "]"}], "+", 
       RowBox[{
        RowBox[{"z", "'"}], "[", "t", "]"}], "-", 
       RowBox[{"z", "[", "t", "]"}]}], "==", 
      RowBox[{
      "0", "\[IndentingNewLine]", "con", " ", "las", " ", "condiciones", " ", 
       RowBox[{"x", "[", "t", "]"}]}], "==", "1"}]}], ",", 
    RowBox[{
     RowBox[{"y", "[", "t", "]"}], "==", "0"}], ",", 
    RowBox[{
     RowBox[{"z", "[", "t", "]"}], "==", "0"}]}], "\[IndentingNewLine]", 
   "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "Definimos", " ", "el", " ", "sistema", " ", "de", " ", "ecuaciones"}], 
   "*)"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sistema2", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"x", "'"}], "[", "t", "]"}], "-", 
       RowBox[{"y", "[", "t", "]"}], "+", 
       RowBox[{"z", "[", "t", "]"}]}], "==", "0"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", 
        RowBox[{"x", "[", "t", "]"}]}], "+", 
       RowBox[{
        RowBox[{"y", "'"}], "[", "t", "]"}], "-", 
       RowBox[{"y", "[", "t", "]"}]}], "==", "0"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", 
        RowBox[{"x", "[", "t", "]"}]}], "+", 
       RowBox[{
        RowBox[{"z", "'"}], "[", "t", "]"}], "-", 
       RowBox[{"z", "[", "t", "]"}]}], "==", "0"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"condicion3", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"x", "[", "0", "]"}], "==", "0"}], ",", 
      RowBox[{
       RowBox[{"y", "[", "0", "]"}], "==", "0"}], ",", 
      RowBox[{
       RowBox[{"z", "[", "1", "]"}], "==", "1"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", "Resolvemos", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"solGeneral4", " ", "=", " ", 
  RowBox[{"DSolve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sistema2", ",", "condicion3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "[", "t", "]"}], ",", 
      RowBox[{"y", "[", "t", "]"}], ",", 
      RowBox[{"z", "[", "t", "]"}]}], "}"}], ",", "t"}], 
   "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{
  3.9674863140697155`*^9, {3.967486345115531*^9, 3.9674863603154755`*^9}, {
   3.967486560517887*^9, 3.9674869913783464`*^9}, {3.9674870400219364`*^9, 
   3.967487044195539*^9}, {3.9674871449140005`*^9, 3.967487147527652*^9}, {
   3.9674873126799264`*^9, 3.967487349953834*^9}},
 CellLabel->
  "In[312]:=",ExpressionUUID->"c777ecf5-4d9f-4632-bc58-4705e4cf5e67"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"x", "[", "t", "]"}], "\[Rule]", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox["\[ExponentialE]", "t"]}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", "\[ExponentialE]"}]]}]}], ",", 
    RowBox[{
     RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"1", "-", 
        SuperscriptBox["\[ExponentialE]", "t"], "+", 
        RowBox[{
         SuperscriptBox["\[ExponentialE]", "t"], " ", "t"}]}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", "\[ExponentialE]"}]]}]}], ",", 
    RowBox[{
     RowBox[{"z", "[", "t", "]"}], "\[Rule]", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"1", "-", 
        RowBox[{"2", " ", 
         SuperscriptBox["\[ExponentialE]", "t"]}], "+", 
        RowBox[{
         SuperscriptBox["\[ExponentialE]", "t"], " ", "t"}]}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", "\[ExponentialE]"}]]}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.9674869735426283`*^9, 3.967487050222522*^9, 3.967487155994288*^9, {
   3.967487333921358*^9, 3.9674873560175505`*^9}},
 CellLabel->
  "Out[314]=",ExpressionUUID->"ed0c472a-8595-437b-a9ff-fd2fdddbba14"]
}, Open  ]],

Cell[BoxData[""], "Input",ExpressionUUID->"dd0ac776-ab47-46e9-9398-0b2ac7418c80"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"POR", " ", "ULTIMO"}], ",", " ", 
     RowBox[{
     "haremos", " ", "la", " ", "verificaci\[OAcute]n", " ", "de", " ", "que",
       " ", "las", " ", "soluciones", " ", "cumplan", " ", "la", " ", 
      "EDO"}]}], "*)"}], "Section"], 
  StyleBox["\[IndentingNewLine]", "Section"], 
  RowBox[{
   StyleBox[
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Pendiente", " ", "actualizar"}], "..."}], ")"}], "Input"], 
   StyleBox["\[IndentingNewLine]", "Section"], "\[IndentingNewLine]", 
   StyleBox["\[IndentingNewLine]", "Section"]}]}]], "Input",
 CellChangeTimes->{{3.967487380510771*^9, 3.967487404123683*^9}, {
  3.967487722913001*^9, 
  3.9674878150074615`*^9}},ExpressionUUID->"786673ac-7b89-4364-b467-\
fce52080f5a4"]
},
WindowSize->{1152., 579.6},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[(
            CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{
            CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
Magnification:>0.8 Inherited,
FrontEndVersion->"13.0 for Microsoft Windows (64-bit) (December 2, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"08f6f151-ea0b-4d7d-8dfc-07d067f7895f"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 3542, 84, 280, "Input",ExpressionUUID->"ca4aecce-2e7a-4129-98d8-48ad68c4518e"],
Cell[4125, 108, 1141, 23, 25, "Output",ExpressionUUID->"87e044d3-a862-473a-a11c-777aa3aa04a3"],
Cell[5269, 133, 1168, 26, 29, "Output",ExpressionUUID->"7d67d3f9-e792-475e-8060-a46007f230b4"],
Cell[6440, 161, 1033, 22, 26, "Output",ExpressionUUID->"b3c011e8-ffc6-467a-b94c-ea3331106908"],
Cell[7476, 185, 1039, 22, 28, "Output",ExpressionUUID->"517dad4e-1ba0-4afb-a19f-d3910e34554f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8552, 212, 2883, 78, 212, "Input",ExpressionUUID->"f9d3e8c4-e8a9-4a73-9aa2-ef0335f9e1a7"],
Cell[11438, 292, 1079, 24, 40, "Output",ExpressionUUID->"519c9ce7-1c81-4334-9bdd-7f7f52abe4b5"],
Cell[12520, 318, 942, 20, 40, "Output",ExpressionUUID->"25ab1bcf-1465-44a0-91cd-277d972b19c3"],
Cell[13465, 340, 944, 20, 40, "Output",ExpressionUUID->"6e38ed9d-b69d-4dd8-852a-ea193c8465de"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14446, 365, 4439, 121, 391, "Input",ExpressionUUID->"77e41077-1d19-4b0c-a6f0-c22b3b94f1ba"],
Cell[18888, 488, 2217, 72, 40, "Output",ExpressionUUID->"5a2d2ae9-d134-431c-acfd-739ca06b9c30"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21142, 565, 4277, 118, 345, "Input",ExpressionUUID->"c777ecf5-4d9f-4632-bc58-4705e4cf5e67"],
Cell[25422, 685, 1296, 39, 43, "Output",ExpressionUUID->"ed0c472a-8595-437b-a9ff-fd2fdddbba14"]
}, Open  ]],
Cell[26733, 727, 81, 0, 22, "Input",ExpressionUUID->"dd0ac776-ab47-46e9-9398-0b2ac7418c80"],
Cell[26817, 729, 803, 21, 97, "Input",ExpressionUUID->"786673ac-7b89-4364-b467-fce52080f5a4"]
}
]
*)

(* End of internal cache information *)

